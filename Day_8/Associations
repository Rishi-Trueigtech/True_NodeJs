In Sequelize, associations define how tables (models) are related to each other in a database.
It helps in creating relationships like:

One-to-One (1:1)
One-to-Many (1:M)
Many-to-Many (M:M)

1Ô∏è‚É£ One-to-One (1:1)
üîπ Example: A User has one Profile.

const User = sequelize.define('User',{name: Sequelize.STRING});
const Profile = sequelize.define('Profile',{bio:Sequalize.STRING});

User.hasOne(Profile); //A user has one profile
Profile.belongsTo(User); //profile belongs to a user

‚û°Ô∏è This means:

A user has one profile.
A profile belongs to one user.
A foreign key (userId) is added to the Profile table.

2Ô∏è‚É£ One-to-Many (1:M)
üîπ Example: A User can have multiple Posts.

const User = sequelize.define('User', { name: Sequelize.STRING });
const Post = sequelize.define('Post', { title: Sequelize.STRING });

User.hasMany(Post); // A User can have many Posts
Post.belongsTo(User); // A Post belongs to one User

‚û°Ô∏è This means:

A user has many posts.
A post belongs to one user.
A foreign key (userId) is added to the Post table

3Ô∏è‚É£ Many-to-Many (M:M)
üîπ Example: A Student can enroll in multiple Courses, and a Course can have multiple Students.

const Student = sequelize.define('Student', { name: Sequelize.STRING });
const Course = sequelize.define('Course', { title: Sequelize.STRING });

Student.belongsToMany(Course, { through: 'StudentCourses' });
Course.belongsToMany(Student, { through: 'StudentCourses' });

‚û°Ô∏è This means:

A student can have many courses.
A course can have many students.
A new table (StudentCourses) is created to store the relationship.

Key Points
‚úî hasOne() ‚Üí One-to-One
‚úî hasMany() ‚Üí One-to-Many
‚úî belongsTo() ‚Üí Used with hasOne() and hasMany()
‚úî belongsToMany() ‚Üí Many-to-Many
